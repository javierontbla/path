{"version":3,"sources":["colors/colors.js","App_styles.js","redux/global_types.js","redux/global_actions.js","components/navbar_component/NavBar_styles.js","components/navbar_component/NavBar.jsx","components/grid_component/Grid_styles.js","components/node_component/Node_Class.js","components/node_component/Node.jsx","algorithms/create_neighbors.js","algorithms/bfs_algorithm.js","mazes/recursive_division_algorithm.js","components/grid_component/Grid.jsx","algorithms/a_star_algorithm.js","algorithms/dijkstra_algorithm.js","mazes/sidewinder_algorithm.js","App.js","reportWebVitals.js","redux/global_reducer.js","redux/root.js","redux/store.js","index.js"],"names":["colors","black","white","red","green","GlobalStyles","createGlobalStyle","TutorialBackground","styled","div","props","tutorial","TutorialBlock","TitleBlock","Title","Description","Text","Icon","obstacle","visited","Instructions","SmallText","span","global_types","selected_pathfinding_algorithm_active_action","type","selected_maze_algorithm_active_action","IconAnimation","keyframes","BlinkAnimation","Option","css","NavContainer","FullTitleContainer","TopTitleContainer","BottomTitleContainer","TitleTop","TitleBottom","FullOptionsContainer","OptionsContainer","OptionsTitle","Options","Option1","option","Option2","Option3","Option4","Option5","SquareBracket","FullIconsContainer","FontAwesomeIcon","restart","Tooltip","data","NoPathMsg","msg","connect","global_reducer","selected_pathfinding_algorithm","selected_pathfinding_algorithm_active","selected_maze_algorithm_active","selected_pathfinding_algorithm_on_grid","selected_maze_algorithm_on_grid","obstacles_on_grid","no_possible_path","restart_grid_icon","dispatch","selected_pathfinding_algorithm_fun","algorithm","payload","selected_pathfinding_algorithm_action","selected_maze_algorithm_fun","maze","selected_maze_algorithm_action","selected_pathfinding_algorithm_active_fun","selected_maze_algorithm_active_fun","no_possible_path_message","restart_grid_active","restart_grid","display_tutorial","useState","option_1","set_option_1","option_2","set_option_2","option_3","set_option_3","option_4","set_option_4","option_5","set_option_5","play_msg","set_play_msg","path_msg","useRef","useEffect","current","run_maze_algorithm","set_option","time","run_restart_grid","setTimeout","update_pathfinding_algorithm","onClick","icon","faUndoAlt","faPlay","faQuestionCircle","href","target","faGithub","GridContainer","Columns","Rows","NodeContainer","NodeClass","f","g","h","i","j","distance","parent","visited_bfs","start_node","end_node","this","Node","column","row","className","id","create_neighbors","columns","rows","grid","neighbors","push","value","next","Queue","first","last","length","dequeue","newNode","newStart","mazeWalls","allDoors","randomNumber","min","max","Math","floor","random","recursive_division_algorithm","graph","cols","addBorderWalls","addInnerWalls","orientation","minX","maxX","minY","maxY","y","door","addHorizontalWall","x","addVerticalWall","selected_maze_algorithm","selected_pathfinding_algorithm_on_grid_fun","selected_maze_algorithm_on_grid_fun","window","innerWidth","innerHeight","set_grid","start_i","set_start_i","start_j","set_start_j","end_i","set_end_i","end_j","set_end_j","moving_start_node","set_moving_start_node","moving_end_node","set_moving_end_node","creating_obstacles","set_creating_obstacles","temporary_grid","Infinity","create_grid","run_algorithm","run_maze","visited_nodes_animation","visited_nodes","path","node_js","document","getElementById","node_react","path_animation","reverse","maze_nodes_animation","mouse_action","action","start","end","currentNode","endNode","open_set","closed_set","Object","keys","result","values","reduce","res","obj","neighbor","tentative_g","finalPath","abs","sort","a","b","a_star_algorithm","visited_a_star","path_a_star","min_q","node_a","node_b","min_value","pop","tempDistance","dijkstra_algorithm","visited_dijkstra","path_dijkstra","queue","enqueue","peek","forEach","bfs_algorithm","path_bfs","recursive_maze","sidewinder_maze","run_set","element","sidewinder_algorithm","map","onMouseDown","on_mouse_down","onMouseUp","on_mouse_up","onMouseEnter","on_mouse_enter","App","selected_algorithm","set_selected_algorithm","set_tutorial","grid_key","set_grid_key","select_algorithm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","root","combineReducers","state","store","createStore","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e8b7b85b.chunk.js","sourcesContent":["export const colors = {\n  white: \"#e4e6e4\",\n  black: \"#1a1a1a\",\n  red: \"#e04136\",\n  green: \"#74c745\",\n};\n","import styled, { createGlobalStyle } from \"styled-components\";\n\nimport { colors } from \"./colors/colors\";\n\nconst { black, white, red, green } = colors;\n\nexport const GlobalStyles = createGlobalStyle`\n    body {\n        background-color: ${black};\n        padding: 0rem;\n        margin: 0.2rem;\n    }\n`;\n\nexport const TutorialBackground = styled.div`\n  display: ${(props) => (props.tutorial ? \"flex\" : \"none\")};\n  justify-content: center;\n  align-items: center;\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: rgba(255, 255, 255, 0.2);\n  z-index: 1;\n`;\n\nexport const TutorialBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: ${black};\n  width: 50vw;\n  height: fit-content;\n  z-index: 2;\n  font-family: \"Righteous\", cursive;\n  letter-spacing: 0.2px;\n  font-size: 1.2rem;\n  padding: 0.8rem;\n  color: ${white};\n`;\n\nexport const TitleBlock = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  justify-content: space-between;\n  margin: 0rem 0.2rem 0.2rem 0.2rem;\n`;\n\nexport const Title = styled.div`\n  font-size: 2.4rem;\n`;\n\nexport const Description = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nexport const Text = styled.div`\n  color: ${white};\n`;\n\nexport const Icon = styled.div`\n  width: 2rem;\n  height: 2rem;\n  background-color: ${(props) =>\n    props.obstacle ? `${white}` : props.visited ? `${green}` : `${red}`};\n  margin: 0.6rem 1rem 0.6rem 0.6rem;\n`;\n\nexport const Instructions = styled.div`\n  margin: 0rem 0.2rem 0.2rem 0.2rem;\n  text-align: justify;\n  font-size: 1.2rem;\n  line-height: 150%;\n`;\n\nexport const SmallText = styled.span`\n  font-size: 0.8rem;\n`;\n","export const global_types = {\n  SELECT_PATHFINDING_ALGORITHM: \"SELECT_PATHFINDING_ALGORITHM\",\n  SELECT_MAZE_ALGORITHM: \"SELECT_MAZE_ALGORITHM\",\n  SELECTED_PATHFINDING_ALGORITHM_ACTIVE:\n    \"SELECTED_PATHFINDING_ALGORITHM_ACTIVE\",\n  SELECTED_MAZE_ALGORITHM_ACTIVE: \"SELECTED_MAZE_ALGORITHM_ACTIVE\",\n  SELECTED_PATHFINDING_ALGORITHM_ON_GRID:\n    \"SELECTED_PATHFINDING_ALGORITHM_ON_GRID\",\n  SELECTED_MAZE_ALGORITHM_ON_GRID: \"SELECTED_MAZE_ALGORITHM_ON_GRID\",\n  OBSTACLES_ON_GRID: \"OBSTACLES_ON_GRID\",\n  NO_POSSIBLE_PATH_MESSAGE: \"NO_POSSIBLE_PATH_MESSAGE\",\n  NO_POSSIBLE_PATH: \"NO_POSSIBLE_PATH\",\n  RESTART_GRID_ACTIVE: \"RESTART_GRID_ACTIVE\",\n};\n","import { global_types } from \"./global_types\";\n\nexport const selected_pathfinding_algorithm_action = (algorithm) => ({\n  type: global_types.SELECT_PATHFINDING_ALGORITHM,\n  payload: algorithm,\n});\n\nexport const selected_maze_algorithm_action = (maze) => ({\n  type: global_types.SELECT_MAZE_ALGORITHM,\n  payload: maze,\n});\n\nexport const selected_pathfinding_algorithm_active_action = () => ({\n  type: global_types.SELECTED_PATHFINDING_ALGORITHM_ACTIVE,\n});\n\nexport const selected_maze_algorithm_active_action = () => ({\n  type: global_types.SELECTED_MAZE_ALGORITHM_ACTIVE,\n});\n\nexport const selected_pathfinding_algorithm_on_grid_action = () => ({\n  type: global_types.SELECTED_PATHFINDING_ALGORITHM_ON_GRID,\n});\n\nexport const selected_maze_algorithm_on_grid_action = () => ({\n  type: global_types.SELECTED_MAZE_ALGORITHM_ON_GRID,\n});\n\nexport const restart_grid_active_action = () => ({\n  type: global_types.RESTART_GRID_ACTIVE,\n});\n\nexport const obstacles_on_grid_action = () => ({\n  type: global_types.OBSTACLES_ON_GRID,\n});\n\nexport const no_possible_path_message_action = () => ({\n  type: global_types.NO_POSSIBLE_PATH_MESSAGE,\n});\n\nexport const no_possible_path_action = () => ({\n  type: global_types.NO_POSSIBLE_PATH,\n});\n","import styled, { css, keyframes } from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { colors } from \"../../colors/colors\";\n\nconst { red, white, black } = colors;\n\nconst IconAnimation = keyframes`\n  from {\n    display: none;\n    transition: opacity 0.5s ease-out;\n    opacity: 0;\n  } \n  to {\n    opacity: 1;\n    display: block;\n  }\n`;\n\nconst BlinkAnimation = keyframes`\n  50% {\n    opacity: 0;\n  }\n`;\n\nconst Option = css`\n  width: fit-content;\n  height: fit-content;\n  font-size: 1rem;\n  padding: 0.5rem;\n  margin: 0rem 0.4rem 0rem 0.4rem;\n  text-align: center;\n  transition: color 150ms ease-in-out;\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  &:after {\n    display: block;\n    content: \"\";\n    border-bottom: solid 2px ${red};\n    transform: scaleX(0);\n    transition: transform 300ms ease-in-out;\n  }\n\n  &:hover:after {\n    transform: scaleX(1);\n  }\n`;\n\nexport const NavContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: fit-content;\n  margin: 0;\n  color: ${white};\n`;\n\nexport const FullTitleContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  width: fit-content;\n  padding: 0.75rem 0rem 0.75rem 1.5rem;\n  font-family: \"Bebas Neue\", cursive;\n`;\n\nexport const TopTitleContainer = styled.div`\n  width: fit-content;\n`;\n\nexport const BottomTitleContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: fit-content;\n`;\n\nexport const TitleTop = styled.div`\n  width: fit-content;\n  font-size: 2.1rem;\n  background-color: ${red};\n  font-style: italic;\n  padding: 0.15rem 0.6rem 0rem 0.3rem;\n  letter-spacing: 0.1px;\n`;\n\nexport const TitleBottom = styled.div`\n  width: fit-content;\n  font-size: 1.6rem;\n  background-color: ${red};\n  font-style: italic;\n  padding: 0rem 0.6rem 0.15rem 0.3rem;\n  letter-spacing: 0.2px;\n`;\n\nexport const FullOptionsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: fit-content;\n  font-family: \"Righteous\", cursive;\n  letter-spacing: 0.2px;\n  margin: 0 auto;\n`;\n\nexport const OptionsContainer = styled.div`\n  width: fit-content;\n  margin: 0rem 1rem 0rem 1rem;\n`;\n\nexport const OptionsTitle = styled.div`\n  color: ${white};\n  text-align: center;\n  font-size: 1.2rem;\n`;\n\nexport const Options = styled.div`\n  display: flex;\n  flex-direction: row;\n  height: fit-content;\n  width: fit-content;\n  font-weight: bold;\n  color: ${white};\n  padding: 0rem 0.2rem 0.2rem 0.2rem;\n`;\n\nexport const Option1 = styled.div`\n  ${Option};\n  color: ${(props) => (props.option ? `${red}` : \"\")};\n`;\n\nexport const Option2 = styled.div`\n  ${Option};\n  color: ${(props) => (props.option ? `${red}` : \"\")};\n`;\n\nexport const Option3 = styled.div`\n  ${Option};\n  color: ${(props) => (props.option ? `${red}` : \"\")};\n`;\n\nexport const Option4 = styled.div`\n  ${Option};\n  color: ${(props) => (props.option ? `${red}` : \"\")};\n`;\n\nexport const Option5 = styled.div`\n  ${Option};\n  color: ${(props) => (props.option ? `${red}` : \"\")};\n`;\n\nexport const SquareBracket = styled.div`\n  height: 0.4rem;\n  border-top: 2px solid ${white};\n  border-right: 2px solid ${white};\n  border-left: 2px solid ${white};\n  margin: 0.2rem 0rem 0.1rem 0rem;\n`;\n\nexport const FullIconsContainer = styled.div`\n  position: absolute;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  margin: 0rem 1rem 0rem 1rem;\n  right: 0;\n`;\n\nexport const Icon = styled(FontAwesomeIcon)`\n  font-size: ${(props) => (props.restart ? \"1.8rem\" : \"2rem\")};\n  margin: 0rem 2rem 0rem 2rem;\n  animation: ${(props) =>\n    props.restart\n      ? css`\n          ${IconAnimation} 1s linear\n        `\n      : \"none\"};\n  color: ${white};\n\n  &:hover {\n    cursor: pointer;\n    opacity: 0.9;\n  }\n`;\n\nexport const Tooltip = styled.div`\n  position: relative;\n  font-size: 0.8rem;\n  font-family: \"Righteous\", cursive;\n  &:after {\n    position: absolute;\n    top: 0.5rem;\n    height: max-content;\n    width: max-content;\n    background: ${black};\n    opacity: 0.9;\n    left: 50%;\n    color: ${white};\n    padding: 0.5rem;\n    content: \"${(props) => props.data}\";\n    transform: translateX(-50%) translateY(100%) scale(0);\n    z-index: 2;\n    transition: 180ms transform;\n    transform-origin: top center;\n  }\n  &:hover:after {\n    transform: translateX(-50%) translateY(100%) scale(1);\n  }\n`;\n\nexport const NoPathMsg = styled.div`\n  visibility: ${(props) => (props.msg ? \"visible\" : \"hidden\")};\n  font-family: \"Righteous\", cursive;\n  color: ${white};\n  font-size: 0.8rem;\n  padding: 0rem 0rem 0rem 0.45rem;\n  animation: ${(props) =>\n    props.msg\n      ? css`\n          ${BlinkAnimation} 1.5s linear infinite\n        `\n      : \"none\"};\n`;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  faPlay,\n  faUndoAlt,\n  faQuestionCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\n\nimport {\n  selected_pathfinding_algorithm_action,\n  selected_maze_algorithm_action,\n  selected_pathfinding_algorithm_active_action,\n  selected_maze_algorithm_active_action,\n  no_possible_path_message_action,\n  restart_grid_active_action,\n} from \"../../redux/global_actions\";\n\nimport {\n  NavContainer,\n  FullTitleContainer,\n  TopTitleContainer,\n  BottomTitleContainer,\n  TitleTop,\n  TitleBottom,\n  FullOptionsContainer,\n  OptionsContainer,\n  OptionsTitle,\n  Options,\n  Option1,\n  Option2,\n  Option3,\n  Option4,\n  Option5,\n  SquareBracket,\n  FullIconsContainer,\n  Icon,\n  Tooltip,\n  NoPathMsg,\n} from \"./NavBar_styles\";\n\nconst NavBar = ({\n  selected_pathfinding_algorithm,\n  selected_pathfinding_algorithm_active,\n  selected_maze_algorithm_active,\n  selected_pathfinding_algorithm_on_grid,\n  selected_maze_algorithm_on_grid,\n  selected_pathfinding_algorithm_fun,\n  selected_maze_algorithm_fun,\n  selected_pathfinding_algorithm_active_fun,\n  selected_maze_algorithm_active_fun,\n  obstacles_on_grid,\n  restart_grid_icon,\n  restart_grid_active,\n  restart_grid,\n  display_tutorial,\n  no_possible_path_message,\n  no_possible_path,\n}) => {\n  // states\n  const [option_1, set_option_1] = useState(false);\n  const [option_2, set_option_2] = useState(false);\n  const [option_3, set_option_3] = useState(false);\n  const [option_4, set_option_4] = useState(false);\n  const [option_5, set_option_5] = useState(false);\n  const [play_msg, set_play_msg] = useState(\"Visualize\");\n  // refs\n  const path_msg = useRef(false);\n\n  useEffect(() => {\n    if (no_possible_path) {\n      no_possible_path_message();\n      path_msg.current = true;\n    }\n  });\n\n  // PATHFINDING ALGORITHM\n  const run_pathfinding_algorithm = () => {\n    if (!selected_pathfinding_algorithm) {\n      set_play_msg(\"Pick one first\");\n      return;\n    }\n    if (\n      selected_pathfinding_algorithm_active ||\n      selected_pathfinding_algorithm_on_grid\n    )\n      return;\n    selected_pathfinding_algorithm_active_fun();\n    set_play_msg(\"Visualize\");\n  };\n\n  // MAZE ALGORITHM\n  const run_maze_algorithm = (maze, set_option) => {\n    let time = 0;\n    if (\n      selected_maze_algorithm_active ||\n      selected_maze_algorithm_on_grid ||\n      selected_pathfinding_algorithm_on_grid ||\n      selected_pathfinding_algorithm_active\n    )\n      return;\n    if (obstacles_on_grid) {\n      time = 1000;\n      run_restart_grid(); // removing all obstacles of grid to run maze\n    }\n\n    setTimeout(() => {\n      set_option_4(false); // reset all div colors\n      set_option_5(false); // reset all div colors\n      set_option(true); // assign color to active algorithm only\n      selected_maze_algorithm_fun(maze); // update maze algorithm on redux\n      selected_maze_algorithm_active_fun();\n    }, time);\n  };\n\n  const update_pathfinding_algorithm = (algorithm, set_option) => {\n    if (\n      selected_pathfinding_algorithm_active ||\n      selected_pathfinding_algorithm_on_grid ||\n      selected_maze_algorithm_active\n    )\n      return;\n    set_option_1(false); // reset all div colors\n    set_option_2(false); // reset all div colors\n    set_option_3(false); // reset all div colors\n    set_option(true); // assign color to active algorithm only\n    selected_pathfinding_algorithm_fun(algorithm); // update pathfinding algorithm on redux\n  };\n\n  const run_restart_grid = () => {\n    restart_grid();\n    restart_grid_active();\n    set_option_1(false);\n    set_option_2(false);\n    set_option_3(false);\n    set_option_4(false);\n    set_option_5(false);\n    path_msg.current = false;\n  };\n\n  return (\n    <>\n      <NavContainer>\n        <FullTitleContainer>\n          <TopTitleContainer>\n            <TitleTop>Pathfinding</TitleTop>\n          </TopTitleContainer>\n          <BottomTitleContainer>\n            <TitleBottom>Visualizer</TitleBottom>\n          </BottomTitleContainer>\n        </FullTitleContainer>\n        <FullOptionsContainer>\n          <OptionsContainer>\n            <OptionsTitle>Algorithms</OptionsTitle>\n            <SquareBracket />\n            <Options>\n              <Option1\n                option={option_1}\n                onClick={() =>\n                  update_pathfinding_algorithm(\n                    \"RUN_A_STAR_ALGORITHM\",\n                    set_option_1\n                  )\n                }\n              >\n                A*\n              </Option1>\n              <Option2\n                option={option_2}\n                onClick={() =>\n                  update_pathfinding_algorithm(\n                    \"RUN_DIJKSTRA_ALGORITHM\",\n                    set_option_2\n                  )\n                }\n              >\n                Dijkstra\n              </Option2>\n              <Option3\n                option={option_3}\n                onClick={() =>\n                  update_pathfinding_algorithm(\n                    \"RUN_BFS_ALGORITHM\",\n                    set_option_3\n                  )\n                }\n              >\n                BFS\n              </Option3>\n            </Options>\n          </OptionsContainer>\n          <Tooltip data={restart_grid_icon ? \"Restart\" : play_msg}>\n            <Icon\n              icon={restart_grid_icon ? faUndoAlt : faPlay}\n              restart={restart_grid_icon ? true : false}\n              onClick={\n                restart_grid_icon\n                  ? () => run_restart_grid()\n                  : () => run_pathfinding_algorithm()\n              }\n            />\n          </Tooltip>\n          <OptionsContainer>\n            <OptionsTitle>Mazes</OptionsTitle>\n            <SquareBracket />\n            <Options>\n              <Option4\n                option={option_4}\n                onClick={() =>\n                  run_maze_algorithm(\n                    \"RUN_RECURSIVE_DIVISION_ALGORITHM\",\n                    set_option_4\n                  )\n                }\n              >\n                Recursive Divison\n              </Option4>\n              <Option5\n                option={option_5}\n                onClick={() =>\n                  run_maze_algorithm(\"RUN_SIDEWINDER_ALGORITHM\", set_option_5)\n                }\n              >\n                Sidewinder\n              </Option5>\n            </Options>\n          </OptionsContainer>\n          <Tooltip data={\"Tutorial\"}>\n            <Icon icon={faQuestionCircle} onClick={() => display_tutorial()} />\n          </Tooltip>\n        </FullOptionsContainer>\n        <FullIconsContainer>\n          <Tooltip data={\"Repository\"}>\n            <a\n              href={\"https://github.com/javierontbla/pathfinding_visualizer\"}\n              target=\"_blank\"\n            >\n              <Icon icon={faGithub} />\n            </a>\n          </Tooltip>\n        </FullIconsContainer>\n      </NavContainer>\n      <NoPathMsg msg={path_msg.current}>\n        Restart, there is no possible path\n      </NoPathMsg>\n    </>\n  );\n};\n\nconst mapStateToProps = ({\n  global_reducer: {\n    selected_pathfinding_algorithm,\n    selected_pathfinding_algorithm_active,\n    selected_maze_algorithm_active,\n    selected_pathfinding_algorithm_on_grid,\n    selected_maze_algorithm_on_grid,\n    obstacles_on_grid,\n    no_possible_path,\n    restart_grid_icon,\n  },\n}) => ({\n  selected_pathfinding_algorithm,\n  selected_pathfinding_algorithm_active,\n  selected_maze_algorithm_active,\n  selected_pathfinding_algorithm_on_grid,\n  selected_maze_algorithm_on_grid,\n  obstacles_on_grid,\n  no_possible_path,\n  restart_grid_icon,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  selected_pathfinding_algorithm_fun: (algorithm) =>\n    dispatch(selected_pathfinding_algorithm_action(algorithm)),\n  selected_maze_algorithm_fun: (maze) =>\n    dispatch(selected_maze_algorithm_action(maze)),\n  selected_pathfinding_algorithm_active_fun: () =>\n    dispatch(selected_pathfinding_algorithm_active_action()),\n  selected_maze_algorithm_active_fun: () =>\n    dispatch(selected_maze_algorithm_active_action()),\n  no_possible_path_message: () => dispatch(no_possible_path_message_action()),\n  restart_grid_active: () => dispatch(restart_grid_active_action()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\n","import styled from \"styled-components\";\n\nexport const GridContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  margin: 0.2rem 0rem 0rem 0rem;\n`;\n\nexport const Columns = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nexport const Rows = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const NodeContainer = styled.div`\n  margin: 0;\n  padding: 0;\n`;\n","export class NodeClass {\n  constructor(\n    f,\n    g,\n    h,\n    i,\n    j,\n    distance,\n    parent,\n    visited,\n    visited_bfs,\n    obstacle,\n    maze,\n    start_node,\n    end_node\n  ) {\n    this.f = f;\n    this.g = g;\n    this.h = h;\n    this.i = i;\n    this.j = j;\n    this.distance = distance;\n    this.parent = parent;\n    this.visited = visited;\n    this.visited_bfs = visited_bfs;\n    this.obstacle = obstacle;\n    this.maze = maze;\n    this.start_node = start_node;\n    this.end_node = end_node;\n  }\n}\n","import React from \"react\";\n\nimport \"./Node_styles.css\";\n\nconst Node = ({ column, row, start_node, end_node }) => {\n  return (\n    <div\n      className={`node_${start_node ? `start` : ``}${end_node ? `end` : ``}`}\n      id={`node_${column}_${row}`}\n    ></div>\n  );\n};\n\nexport default Node;\n","// neighbors generation for each node\nexport const create_neighbors = (i, j, columns, rows, grid, maze) => {\n  let neighbors = [];\n  // adding the neighboors to each individual node\n  // and those get stored in the object node\n  // managing edges with if statements\n  if (j < rows - 1) neighbors.push(grid[i][j + 1]);\n  if (i < columns - 1) neighbors.push(grid[i + 1][j]);\n\n  if (!maze) {\n    if (j > 0) neighbors.push(grid[i][j - 1]);\n    if (i > 0) neighbors.push(grid[i - 1][j]);\n    if (i < columns - 1 && j < rows - 1) neighbors.push(grid[i + 1][j + 1]);\n    if (i > 0 && j < rows - 1) neighbors.push(grid[i - 1][j + 1]);\n    if (i > 0 && j > 0) neighbors.push(grid[i - 1][j - 1]);\n    if (i < columns - 1 && j > 0) neighbors.push(grid[i + 1][j - 1]);\n  }\n\n  return neighbors;\n};\n","// BFS Implementation\nimport { create_neighbors } from \"./create_neighbors\";\n\n// Queue Implementation\nclass Node {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nclass Queue {\n  constructor() {\n    this.first = null;\n    this.last = null;\n    this.length = 0;\n  }\n  // first item\n  peek() {\n    const value = this.first.value;\n    this.dequeue(this.first);\n    return value;\n  }\n  // put in\n  enqueue(value) {\n    const newNode = new Node(value);\n    if (this.length === 0) {\n      this.first = newNode;\n    } else {\n      this.last.next = newNode;\n    }\n    this.last = newNode;\n    this.length++;\n  }\n\n  // put out\n  dequeue() {\n    if (this.length === 0) return;\n    if (this.length === 1) this.last = null;\n\n    const newStart = this.first.next;\n    this.first = newStart;\n    this.length--;\n  }\n}\n\nexport const bfs_algorithm = (start, end, cols, rows, grid) => {\n  let queue = new Queue();\n  let visited = [];\n  let path = [];\n\n  queue.enqueue(start);\n  visited.push(start);\n  start.visited_bfs = true;\n\n  while (queue.length > 0) {\n    let current = queue.peek();\n\n    // when we hit the end node\n    // to end the algorithm\n    if (current === end) {\n      path.push(current);\n\n      while (current.parent) {\n        path.push(current.parent);\n        current = current.parent;\n      }\n      break;\n    }\n\n    // add neighbors to only nodes that are being evaluated\n    current.neighbors = create_neighbors(\n      current.i,\n      current.j,\n      cols,\n      rows,\n      grid\n    );\n\n    current.neighbors.forEach((neighbor) => {\n      if (!neighbor.visited_bfs && !neighbor.obstacle && !neighbor.maze) {\n        visited.push(neighbor);\n        neighbor.visited_bfs = true;\n        neighbor.parent = current;\n        queue.enqueue(neighbor);\n      }\n    });\n  }\n\n  return [visited, path];\n};\n","// Recursive Division Algorithm\nlet mazeWalls = [];\nlet allDoors = {};\n\nconst randomNumber = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst addBorderWalls = (grid, cols, rows) => {\n  for (let i = 0; i < cols; i++) {\n    if (i === 0 || i === cols - 1) {\n      for (let j = 0; j < rows; j++) {\n        mazeWalls.push(grid[i][j]);\n      }\n    } else {\n      mazeWalls.push(grid[i][0]);\n      mazeWalls.push(grid[i][rows - 1]);\n    }\n  }\n  return grid;\n};\n\nexport const recursive_division_algorithm = (graph, cols, rows) => {\n  // generating the border walls of the grid\n  // this returns the grid with border walls\n  let grid = addBorderWalls(graph, cols, rows);\n\n  const addHorizontalWall = (minX, maxX, y) => {\n    // randomNumber this way creates only odd numbers\n    const door = Math.floor(randomNumber(minX, maxX) / 2) * 2 + 1;\n\n    for (let i = minX; i <= maxX; i++) {\n      if (i !== door && !allDoors[`${grid[i][y].i}${grid[i][y].j}`]) {\n        mazeWalls.push(grid[i][y]);\n      } else if (i === door) allDoors[`${grid[i][y].i}${grid[i][y].j}`] = true;\n    }\n  };\n\n  const addVerticalWall = (minY, maxY, x) => {\n    // randomNumber this way creates only odd numbers\n    const door = Math.floor(randomNumber(minY, maxY) / 2) * 2 + 1;\n\n    for (let i = minY; i <= maxY; i++) {\n      if (i !== door && !allDoors[`${grid[x][i].i}${grid[x][i].j}`]) {\n        mazeWalls.push(grid[x][i]);\n      } else if (i === door) allDoors[`${grid[x][i].i}${grid[x][i].j}`] = true;\n    }\n  };\n\n  const addInnerWalls = (orientation, minX, maxX, minY, maxY) => {\n    if (orientation) {\n      // 27 < 2\n      if (maxX - minX < 2) {\n        // break recursive function\n        return;\n      }\n      // randomNumber this way, creates an even number\n      const y = Math.floor(randomNumber(minY, maxY) / 2) * 2;\n      // creates only horizontal walls in the x-axis\n      addHorizontalWall(minX, maxX, y);\n\n      addInnerWalls(!orientation, minX, maxX, minY, y - 1);\n      addInnerWalls(!orientation, minX, maxX, y + 1, maxY);\n    } else {\n      if (maxY - minY < 2) {\n        // break recursive function\n        return;\n      }\n      // randomNumber this way, creates an even number\n      const x = Math.floor(randomNumber(minX, maxX) / 2) * 2;\n      // creates only vertical walls in the y-axis\n      addVerticalWall(minY, maxY, x);\n\n      addInnerWalls(!orientation, minX, x - 1, minY, maxY);\n      addInnerWalls(!orientation, x + 1, maxX, minY, maxY);\n    }\n  };\n\n  // the walls that actually form the maze (inside)\n  addInnerWalls(true, 1, cols - 2, 1, rows - 2);\n  return mazeWalls;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { GridContainer, Columns, Rows, NodeContainer } from \"./Grid_styles\";\nimport { NodeClass } from \"../node_component/Node_Class\";\nimport Node from \"../node_component/Node\";\nimport {\n  selected_pathfinding_algorithm_active_action,\n  selected_maze_algorithm_active_action,\n  selected_pathfinding_algorithm_on_grid_action,\n  selected_maze_algorithm_on_grid_action,\n  obstacles_on_grid_action,\n  no_possible_path_action,\n} from \"../../redux/global_actions\";\nimport { a_star_algorithm } from \"../../algorithms/a_star_algorithm\";\nimport { dijkstra_algorithm } from \"../../algorithms/dijkstra_algorithm\";\nimport { bfs_algorithm } from \"../../algorithms/bfs_algorithm\";\nimport { recursive_division_algorithm } from \"../../mazes/recursive_division_algorithm\";\nimport { sidewinder_algorithm } from \"../../mazes/sidewinder_algorithm\";\n\nconst Grid = ({\n  selected_pathfinding_algorithm,\n  selected_maze_algorithm,\n  selected_pathfinding_algorithm_active,\n  selected_maze_algorithm_active,\n  selected_pathfinding_algorithm_on_grid,\n  selected_maze_algorithm_on_grid,\n  selected_pathfinding_algorithm_active_fun,\n  selected_maze_algorithm_active_fun,\n  selected_pathfinding_algorithm_on_grid_fun,\n  selected_maze_algorithm_on_grid_fun,\n  obstacles_on_grid,\n  no_possible_path,\n}) => {\n  // screen size\n  const columns = Math.floor(window.innerWidth / 30);\n  const rows = Math.floor((window.innerHeight - 180) / 30);\n  // creating grid\n  const [grid, set_grid] = useState([]);\n  // setting i and j coordinates for start node & end node\n  const [start_i, set_start_i] = useState(null);\n  const [start_j, set_start_j] = useState(null);\n  const [end_i, set_end_i] = useState(null);\n  const [end_j, set_end_j] = useState(null);\n  // start node & end nodes moving actions\n  const [moving_start_node, set_moving_start_node] = useState(false);\n  const [moving_end_node, set_moving_end_node] = useState(false);\n  const [creating_obstacles, set_creating_obstacles] = useState(false);\n\n  useEffect(() => {\n    const create_grid = () => {\n      const temporary_grid = [];\n      for (let i = 0; i < columns; i++) {\n        temporary_grid[i] = [];\n        for (let j = 0; j < rows; j++) {\n          temporary_grid[i][j] = new NodeClass(\n            0,\n            0,\n            0,\n            i,\n            j,\n            i === 0 && j === 0 ? 0 : Infinity,\n            null,\n            false,\n            false,\n            false,\n            false,\n            i === 0 && j === 0 ? true : false, // assign start node\n            i === columns - 1 && j === rows - 1 ? true : false // assign end node\n          );\n        }\n      }\n\n      set_start_i(0);\n      set_start_j(0);\n      set_end_i(columns - 1);\n      set_end_j(rows - 1);\n\n      return temporary_grid;\n    };\n\n    set_grid(create_grid());\n  }, []);\n\n  useEffect(() => {\n    if (\n      selected_pathfinding_algorithm &&\n      selected_pathfinding_algorithm_active &&\n      !selected_pathfinding_algorithm_on_grid\n    ) {\n      run_algorithm(selected_pathfinding_algorithm);\n    }\n    if (\n      selected_maze_algorithm &&\n      selected_maze_algorithm_active &&\n      !selected_maze_algorithm_on_grid &&\n      !selected_pathfinding_algorithm_on_grid\n    ) {\n      run_maze(selected_maze_algorithm);\n    }\n  });\n\n  const path_animation = (path) => {\n    for (let i = 0; i < path.length; i++) {\n      // if it is start_node or end_node skip that node\n      if (path[i].start_node || path[i].end_node) continue;\n      setTimeout(() => {\n        // DANGER!!!\n        // NEVER DO THIS, IT'S BAD PRACTICE\n        // I'M DOING HERE TO AVOID CRASHING REACT'S VIRTUAL DOM\n        const node_js = document.getElementById(\n          `node_${path[i].i}_${path[i].j}`\n        );\n        node_js.className = \"node_path\";\n        if (i === path.length - 2) selected_pathfinding_algorithm_on_grid_fun();\n      }, i * 75);\n    }\n  };\n\n  const visited_nodes_animation = (visited_nodes, path) => {\n    for (let i = 0; i < visited_nodes.length; i++) {\n      setTimeout(() => {\n        // DANGER!!!\n        // NEVER DO THIS, IT'S BAD PRACTICE\n        // I'M DOING HERE TO AVOID CRASHING REACT'S VIRTUAL DOM\n        const node_js = document.getElementById(\n          `node_${visited_nodes[i].i}_${visited_nodes[i].j}`\n        );\n        const node_react = grid[visited_nodes[i].i][visited_nodes[i].j];\n\n        if (node_react.start_node) node_js.className = \"node_start\";\n        else if (node_react.end_node) node_js.className = \"node_end\";\n        else node_js.className = \"node_visited\";\n\n        // calling final path animation function\n        if (i === visited_nodes.length - 1) path_animation(path.reverse());\n      }, i * 75);\n    }\n  };\n\n  const maze_nodes_animation = (maze) => {\n    for (let i = 0; i < maze.length; i++) {\n      setTimeout(() => {\n        // DANGER!!!\n        // NEVER DO THIS, IT'S BAD PRACTICE\n        // I'M DOING HERE TO AVOID CRASHING REACT'S VIRTUAL DOM\n        const node_js = document.getElementById(\n          `node_${maze[i].i}_${maze[i].j}`\n        );\n        const node_react = grid[maze[i].i][maze[i].j];\n\n        if (node_react.start_node) {\n          node_js.className = \"node_start\";\n          node_react.obstacle = false;\n        } else if (node_react.end_node) {\n          node_js.className = \"node_end\";\n          node_react.obstacle = false;\n        } else {\n          node_js.className = \"node_obstacle\";\n          node_react.obstacle = true;\n        }\n\n        if (i === maze.length - 1) {\n          selected_maze_algorithm_on_grid_fun();\n        }\n      }, i * 50);\n    }\n  };\n\n  const mouse_action = (action, i, j) => {\n    // DANGER!!!\n    // NEVER DO THIS, IT'S BAD PRACTICE\n    // I'M DOING HERE TO AVOID CRASHING REACT'S VIRTUAL DOM\n    const node_js = document.getElementById(`node_${i}_${j}`);\n    const node_react = grid[i][j];\n\n    if (\n      selected_pathfinding_algorithm_on_grid ||\n      selected_pathfinding_algorithm_active ||\n      selected_maze_algorithm_active\n    )\n      return;\n\n    switch (action) {\n      case \"REMOVE_START_NODE\":\n        node_js.className = \"node_\";\n        node_react.start_node = false;\n        node_react.distance = Infinity;\n        break;\n      case \"ADD_START_NODE\":\n        node_js.className = \"node_start\";\n        node_react.start_node = true;\n        node_react.distance = 0;\n        break;\n      case \"REMOVE_END_NODE\":\n        node_js.className = \"node_\";\n        node_react.end_node = false;\n        break;\n      case \"ADD_END_NODE\":\n        node_js.className = \"node_end\";\n        node_react.end_node = true;\n        break;\n      case \"ADD_OBSTACLE\":\n        if (node_react.start_node || node_react.end_node) return;\n        if (node_react.obstacle) return;\n        node_js.className = \"node_obstacle\";\n        node_react.obstacle = true;\n        break;\n      case \"REMOVE_OBSTACLE\":\n        if (node_react.start_node || node_react.end_node) return;\n        node_js.className = \"node_\";\n        node_react.obstacle = false;\n        break;\n      default:\n        break;\n    }\n  };\n\n  // pressing mouse\n  const on_mouse_down = (i, j) => {\n    if (\n      selected_pathfinding_algorithm_on_grid ||\n      selected_pathfinding_algorithm_active ||\n      selected_maze_algorithm_active\n    )\n      return;\n    if (i === start_i && j === start_j) {\n      mouse_action(\"REMOVE_START_NODE\", i, j);\n      set_moving_start_node(true);\n    } else if (i === end_i && j === end_j) {\n      mouse_action(\"REMOVE_END_NODE\", i, j);\n      set_moving_end_node(true);\n    } else {\n      set_creating_obstacles(true);\n    }\n  };\n\n  // moving mouse around\n  const on_mouse_enter = (i, j) => {\n    if (!creating_obstacles) return;\n    if ((i !== start_i || j !== start_j) && (i !== end_i || j !== end_j)) {\n      if (grid[i][j].obstacle) {\n        mouse_action(\"REMOVE_OBSTACLE\", i, j);\n      } else {\n        mouse_action(\"ADD_OBSTACLE\", i, j);\n      }\n    }\n  };\n\n  // leaving mouse\n  const on_mouse_up = (i, j) => {\n    if (moving_start_node) {\n      mouse_action(\"ADD_START_NODE\", i, j);\n      set_moving_start_node(false); // moving start node action end\n      set_start_i(i);\n      set_start_j(j);\n    } else if (moving_end_node) {\n      mouse_action(\"ADD_END_NODE\", i, j);\n      set_moving_end_node(false); // moving end node action end\n      set_end_i(i);\n      set_end_j(j);\n    } else {\n      set_creating_obstacles(false);\n      obstacles_on_grid();\n    }\n  };\n\n  const run_algorithm = (algorithm) => {\n    switch (algorithm) {\n      case \"RUN_A_STAR_ALGORITHM\":\n        selected_pathfinding_algorithm_active_fun();\n        const [visited_a_star, path_a_star] = a_star_algorithm(\n          grid[start_i][start_j],\n          grid[end_i][end_j],\n          columns,\n          rows,\n          grid\n        );\n        if (visited_a_star && path_a_star) {\n          visited_nodes_animation(visited_a_star, path_a_star);\n        } else {\n          no_possible_path();\n        }\n        break;\n      case \"RUN_DIJKSTRA_ALGORITHM\":\n        selected_pathfinding_algorithm_active_fun();\n        const [visited_dijkstra, path_dijkstra] = dijkstra_algorithm(\n          grid[end_i][end_j],\n          columns,\n          rows,\n          grid\n        );\n        if (path_dijkstra.length < 2) {\n          no_possible_path();\n        } else if (visited_dijkstra && path_dijkstra.length > 1) {\n          visited_nodes_animation(visited_dijkstra, path_dijkstra);\n        }\n        break;\n      case \"RUN_BFS_ALGORITHM\":\n        selected_pathfinding_algorithm_active_fun();\n        const [visited_bfs, path_bfs] = bfs_algorithm(\n          grid[start_i][start_j],\n          grid[end_i][end_j],\n          columns,\n          rows,\n          grid\n        );\n        if (path_bfs.length < 2) {\n          no_possible_path();\n        } else if (visited_bfs && path_bfs.length > 0) {\n          visited_nodes_animation(visited_bfs, path_bfs);\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  const run_maze = (maze) => {\n    switch (maze) {\n      case \"RUN_RECURSIVE_DIVISION_ALGORITHM\":\n        selected_maze_algorithm_active_fun();\n        const recursive_maze = recursive_division_algorithm(\n          grid,\n          columns,\n          rows\n        );\n        maze_nodes_animation(recursive_maze);\n        break;\n\n      case \"RUN_SIDEWINDER_ALGORITHM\":\n        selected_maze_algorithm_active_fun();\n        const sidewinder_maze = sidewinder_algorithm(grid, columns, rows);\n        maze_nodes_animation(sidewinder_maze);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <>\n      <GridContainer>\n        <Columns>\n          {grid.map((column, i) => {\n            return (\n              <Rows>\n                {column.map((row, j) => (\n                  <NodeContainer\n                    key={`node_container_${i}_${j}`}\n                    onClick={() => mouse_action(\"ADD_OBSTACLE\", i, j)}\n                    onMouseDown={() => on_mouse_down(i, j)}\n                    onMouseUp={() => on_mouse_up(i, j)}\n                    onMouseEnter={() => on_mouse_enter(i, j)}\n                  >\n                    <Node\n                      key={`node_${i}_${j}`}\n                      column={i}\n                      row={j}\n                      start_node={grid[i][j].start_node}\n                      end_node={grid[i][j].end_node}\n                    />\n                  </NodeContainer>\n                ))}\n              </Rows>\n            );\n          })}\n        </Columns>\n      </GridContainer>\n    </>\n  );\n};\n\n// redux\nconst mapStateToProps = ({\n  global_reducer: {\n    selected_pathfinding_algorithm,\n    selected_maze_algorithm,\n    selected_pathfinding_algorithm_active,\n    selected_maze_algorithm_active,\n    selected_pathfinding_algorithm_on_grid,\n    selected_maze_algorithm_on_grid,\n  },\n}) => ({\n  selected_pathfinding_algorithm,\n  selected_maze_algorithm,\n  selected_pathfinding_algorithm_active,\n  selected_maze_algorithm_active,\n  selected_pathfinding_algorithm_on_grid,\n  selected_maze_algorithm_on_grid,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  selected_pathfinding_algorithm_active_fun: () =>\n    dispatch(selected_pathfinding_algorithm_active_action()),\n  selected_maze_algorithm_active_fun: () =>\n    dispatch(selected_maze_algorithm_active_action()),\n  selected_pathfinding_algorithm_on_grid_fun: () =>\n    dispatch(selected_pathfinding_algorithm_on_grid_action()),\n  selected_maze_algorithm_on_grid_fun: () =>\n    dispatch(selected_maze_algorithm_on_grid_action()),\n  obstacles_on_grid: () => dispatch(obstacles_on_grid_action()),\n  no_possible_path: () => dispatch(no_possible_path_action()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid);\n","import { create_neighbors } from \"./create_neighbors\";\n\n// A* Pathfinder Algorithm\nconst calculate_heuristic = (currentNode, endNode) => {\n  // distance between the currentNode & endNode\n  // sort of pythagorean theorem\n  return (\n    Math.abs(currentNode.i - endNode.i) + Math.abs(currentNode.j - endNode.j)\n  );\n};\n\n// function gets called with start and end node only\n// because, the nodes are objs that have their neighbors stored\nexport const a_star_algorithm = (start, end, cols, rows, grid) => {\n  // nodes being evaluated\n  let open_set = {};\n  // nodes done evaluating\n  let closed_set = {};\n  // answer path nodes\n  let path = [];\n\n  // we push the start node to be evaluated and enter the loop\n  open_set[`${start.i}${start.j}`] = start;\n\n  while (true) {\n    if (Object.keys(open_set).length > 0) {\n      // start loop with open_set only containing the start node\n      let set = Object.values(open_set);\n      let result = set.reduce((res, obj) => {\n        return obj.f < res.f ? obj : res;\n      });\n\n      let closest_node = `${result.i}${result.j}`;\n      // current gets updated everytime with the neighbor node with the lowest F\n      let current = open_set[closest_node];\n\n      // these means the algorithm is done\n      if (current === end) {\n        path.push(current);\n        while (current.parent) {\n          // add each parent of each node that once was the current node\n          path.push(current.parent);\n          // going backwards\n          current = current.parent;\n        }\n        // use break, no return\n        break;\n      }\n\n      // remove current from open_set\n      // O(1)\n      delete open_set[`${current.i}${current.j}`];\n      // add current to closed_set\n      closed_set[`${current.i}${current.j}`] = current;\n\n      // only create neighbors for nodes that are being evaluated\n      current.neighbors = create_neighbors(\n        current.i,\n        current.j,\n        cols,\n        rows,\n        grid\n      );\n      // get the neighbors of current\n      for (let i = 0; i < current.neighbors.length; i++) {\n        // store individual neighbor\n        let neighbor = current.neighbors[i];\n\n        // if neighbors var isn't in closetSet arr, enter statement\n\n        if (\n          !closed_set[`${neighbor.i}${neighbor.j}`] &&\n          !neighbor.obstacle &&\n          !neighbor.maze\n        ) {\n          let tentative_g = current.g + 1;\n\n          let finalPath = false;\n          if (open_set[`${neighbor.i}${neighbor.j}`]) {\n            if (tentative_g < neighbor.g) {\n              neighbor.g = tentative_g;\n              finalPath = true;\n            }\n          } else {\n            neighbor.g = tentative_g;\n            open_set[`${neighbor.i}${neighbor.j}`] = neighbor;\n            finalPath = true;\n          }\n\n          if (finalPath) {\n            // calculate temptative distance between neighbor node and end node\n            neighbor.h = calculate_heuristic(neighbor, end);\n            // f value of the node, this is the actual value\n            // that dictate the final cost of the node\n            neighbor.f = neighbor.g + neighbor.h;\n            neighbor.parent = current;\n          }\n        }\n      }\n    } else {\n      return [false, false];\n    }\n  }\n  return [Object.values(closed_set).sort((a, b) => (a.g > b.g ? 1 : -1)), path];\n};\n","// Dijkstra Algorithm\nimport { create_neighbors } from \"./create_neighbors\";\n\nexport const dijkstra_algorithm = (end, cols, rows, grid) => {\n  let min_q = [];\n  let visited = [];\n  let path = [];\n\n  for (let i = 0; i < grid.length; i++) {\n    let column = grid[i];\n    for (let j = 0; j < column.length; j++) {\n      min_q.push(grid[i][j]);\n    }\n  }\n\n  while (min_q.length > 0) {\n    min_q.sort((node_a, node_b) => node_b.distance - node_a.distance);\n    // delete and store current node from min_q array\n    let min_value = min_q.pop();\n\n    // if node is an obstacle continue to next iteration\n    if (min_value.obstacle || min_value.maze) continue;\n\n    if (min_value === end) {\n      path.push(min_value);\n\n      while (min_value.parent) {\n        path.push(min_value.parent);\n        min_value = min_value.parent;\n      }\n      break;\n    }\n\n    visited.push(min_value);\n    min_value.neighbors = create_neighbors(\n      min_value.i,\n      min_value.j,\n      cols,\n      rows,\n      grid\n    );\n    for (let i = 0; i < min_value.neighbors.length; i++) {\n      let neighbor = min_value.neighbors[i];\n      let tempDistance = min_value.distance + 1;\n\n      if (tempDistance < neighbor.distance) {\n        neighbor.distance = tempDistance;\n        neighbor.parent = min_value;\n      }\n    }\n  }\n\n  return [visited, path];\n};\n","// Sidewinder Algorithm\n\nexport const sidewinder_algorithm = (grid, cols, rows) => {\n  let maze = [];\n  let run_set = [];\n\n  for (let i = 1; i < cols - 1; i += 2) {\n    for (let j = 1; j < rows - 1; j += 2) {\n      const random = Math.floor(Math.random() * 10 + 1);\n\n      run_set.push(grid[i][j]);\n\n      if (j < rows - 1 && random % 2 === 0) {\n        maze.push(grid[i][j]);\n        maze.push(grid[i][j + 1]);\n      } else {\n        const element = run_set[Math.floor(Math.random() * run_set.length)];\n        // current\n        maze.push(grid[element.i][element.j]);\n        // neighbor\n        maze.push(grid[element.i + 1][element.j]);\n      }\n      run_set = [];\n    }\n  }\n\n  return maze;\n};\n","import React, { useState } from \"react\";\n\nimport {\n  GlobalStyles,\n  TutorialBackground,\n  TutorialBlock,\n  TitleBlock,\n  Title,\n  Description,\n  Icon,\n  Text,\n  Instructions,\n  SmallText,\n} from \"./App_styles\";\nimport NavBar from \"./components/navbar_component/NavBar\";\nimport Grid from \"./components/grid_component/Grid\";\n\nconst App = () => {\n  const [selected_algorithm, set_selected_algorithm] = useState(null);\n  const [tutorial, set_tutorial] = useState(false);\n  const [grid_key, set_grid_key] = useState(1);\n\n  const select_algorithm = (algorithm) => {\n    set_selected_algorithm(algorithm);\n  };\n\n  const restart_grid = () => {\n    set_grid_key(grid_key + 1);\n  };\n\n  const display_tutorial = () => {\n    set_tutorial(!tutorial);\n  };\n\n  return (\n    <>\n      <GlobalStyles />\n      <TutorialBackground\n        tutorial={tutorial}\n        onClick={() => display_tutorial()}\n      >\n        <TutorialBlock>\n          <TitleBlock>\n            <Title>Instructions</Title>\n          </TitleBlock>\n          <Instructions>\n            Welcome to the Pathfinding Visualizer, fill the grid with obstacles\n            (pressing down your mouse over the grid) or choose a Maze Algorithm\n            to do it for you. Then pick a searching algorithm (left side) and\n            click the Play button (in the middle) to visualize it. Note: The\n            algorithm will always find the closest path between the two red\n            nodes.\n          </Instructions>\n          <TitleBlock>\n            <Title>Legend</Title>\n          </TitleBlock>\n          <Description>\n            <Icon path={\"true\"} />\n            <Text>\n              Start/End Node{\" \"}\n              <SmallText>\n                - (Move them by pressing down and displacing your mouse)\n              </SmallText>\n            </Text>\n          </Description>\n          <Description>\n            <Icon obstacle={\"true\"} />\n            <Text>Obstacle/Maze Node</Text>\n          </Description>\n          <Description>\n            <Icon visited={\"true\"} />\n            <Text>Visited Node</Text>\n          </Description>\n          <Description>\n            <Icon path={\"true\"} />\n            <Text>Final Path</Text>\n          </Description>\n        </TutorialBlock>\n      </TutorialBackground>\n      <NavBar\n        restart_grid={() => restart_grid()}\n        select_algorithm={select_algorithm}\n        display_tutorial={() => display_tutorial()}\n      />\n      <Grid key={grid_key} selected_algorithm={selected_algorithm} />\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { global_types } from \"./global_types\";\n\nconst INITIAL_STATE = {\n  selected_pathfinding_algorithm: null,\n  selected_maze_algorithm: null,\n  selected_pathfinding_algorithm_active: false,\n  selected_maze_algorithm_active: false,\n  selected_pathfinding_algorithm_on_grid: false,\n  selected_maze_algorithm_on_grid: false,\n  obstacles_on_grid: false,\n  no_possible_path: false,\n  restart_grid_icon: false,\n};\n\nexport const global_reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case global_types.SELECT_PATHFINDING_ALGORITHM:\n      return {\n        ...state,\n        selected_pathfinding_algorithm: action.payload,\n      };\n    case global_types.SELECT_MAZE_ALGORITHM:\n      return {\n        ...state,\n        selected_maze_algorithm: action.payload,\n      };\n    case global_types.SELECTED_PATHFINDING_ALGORITHM_ACTIVE:\n      return {\n        ...state,\n        selected_pathfinding_algorithm_active: true,\n      };\n\n    case global_types.SELECTED_MAZE_ALGORITHM_ACTIVE:\n      return {\n        ...state,\n        selected_maze_algorithm_active: true,\n      };\n\n    case global_types.SELECTED_PATHFINDING_ALGORITHM_ON_GRID:\n      return {\n        ...state,\n        selected_pathfinding_algorithm_active: false,\n        selected_pathfinding_algorithm_on_grid: true,\n        restart_grid_icon: true,\n      };\n    case global_types.SELECTED_MAZE_ALGORITHM_ON_GRID:\n      return {\n        ...state,\n        selected_maze_algorithm_active: false,\n        selected_maze_algorithm_on_grid: true,\n      };\n    case global_types.RESTART_GRID_ACTIVE:\n      return {\n        ...state,\n        selected_pathfinding_algorithm: null,\n        selected_maze_algorithm: null,\n        selected_pathfinding_algorithm_active: false,\n        selected_maze_algorithm_active: false,\n        selected_pathfinding_algorithm_on_grid: false,\n        selected_maze_algorithm_on_grid: false,\n        obstacles_on_grid: false,\n        no_possible_path: false,\n        restart_grid_icon: false,\n      };\n    case global_types.OBSTACLES_ON_GRID:\n      return {\n        ...state,\n        obstacles_on_grid: true,\n      };\n\n    case global_types.NO_POSSIBLE_PATH_MESSAGE:\n      return {\n        ...state,\n        restart_grid_icon: true,\n      };\n\n    case global_types.NO_POSSIBLE_PATH:\n      return {\n        ...state,\n        no_possible_path: true,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\n\nimport { global_reducer } from \"./global_reducer\";\n\nconst root = combineReducers({ global_reducer });\n\nexport default root;\n","import { createStore } from \"redux\";\n\nimport root from \"./root\";\n\nconst store = createStore(root);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}